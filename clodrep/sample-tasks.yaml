# Sample Tasks for Claude Code CLI Secure Executor
# Demonstrates secret injection, verification, and delegation patterns

# 1. Notion API - Create deployment log page
- id: create-notion-deployment-log
  agent: orchestrator
  task: "Create deployment summary in Notion"
  command: |
    curl -X POST https://api.notion.com/v1/pages \
      -H "Authorization: Bearer {{NOTION_TOKEN}}" \
      -H "Content-Type: application/json" \
      -H "Notion-Version: 2022-06-28" \
      -d '{
        "parent": {"database_id": "your-database-id"},
        "properties": {
          "Name": {
            "title": [{"text": {"content": "Deployment - $(date +%Y-%m-%d)"}}]
          },
          "Status": {
            "select": {"name": "Success"}
          },
          "Deploy Time": {
            "date": {"start": "$(date -Iseconds)"}
          }
        },
        "children": [
          {
            "object": "block",
            "type": "paragraph",
            "paragraph": {
              "rich_text": [{"type": "text", "text": {"content": "Automated deployment completed successfully."}}]
            }
          }
        ]
      }'
  verify: 'curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer {{NOTION_TOKEN}}" https://api.notion.com/v1/databases/your-database-id'
  success_condition: "200"
  fail_message: "‚ùå Failed to create Notion deployment log"

# 2. Vercel Deployment - Deploy to production
- id: vercel-production-deploy
  agent: orchestrator
  task: "Deploy application to Vercel production"
  command: |
    curl -X POST https://api.vercel.com/v13/deployments \
      -H "Authorization: Bearer {{VERCEL_TOKEN}}" \
      -H "Content-Type: application/json" \
      -d '{
        "name": "my-app",
        "gitSource": {
          "type": "github",
          "repo": "username/my-app",
          "ref": "main"
        },
        "target": "production"
      }'
  verify: 'curl -s -H "Authorization: Bearer {{VERCEL_TOKEN}}" "https://api.vercel.com/v6/deployments" | jq -r ".[0].state"'
  success_condition: "READY"
  comparison_type: "contains"
  fail_message: "‚ùå Vercel deployment failed or not ready"

# 3. GitHub API - Create release
- id: create-github-release
  agent: orchestrator
  task: "Create GitHub release"
  command: |
    curl -X POST https://api.github.com/repos/username/repo/releases \
      -H "Authorization: token {{GITHUB_TOKEN}}" \
      -H "Content-Type: application/json" \
      -d '{
        "tag_name": "v1.0.0",
        "target_commitish": "main",
        "name": "Release v1.0.0",
        "body": "Automated release created by secure executor",
        "draft": false,
        "prerelease": false
      }'
  verify: 'curl -s -H "Authorization: token {{GITHUB_TOKEN}}" "https://api.github.com/repos/username/repo/releases/latest" | jq -r ".tag_name"'
  success_condition: "v1.0.0"
  fail_message: "‚ùå GitHub release creation failed"

# 4. Slack Notification - Send deployment notification
- id: slack-deployment-notification
  agent: orchestrator
  task: "Send Slack deployment notification"
  command: |
    curl -X POST https://slack.com/api/chat.postMessage \
      -H "Authorization: Bearer {{SLACK_TOKEN}}" \
      -H "Content-Type: application/json" \
      -d '{
        "channel": "#deployments",
        "text": "üöÄ Deployment Complete",
        "blocks": [
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*Deployment Status: SUCCESS* ‚úÖ\n*Time:* $(date)\n*Environment:* Production"
            }
          }
        ]
      }'
  verify: 'curl -s -H "Authorization: Bearer {{SLACK_TOKEN}}" "https://slack.com/api/auth.test" | jq -r ".ok"'
  success_condition: "true"
  fail_message: "‚ùå Slack notification failed"

# 5. Local Build Task (delegates to Bruno)
- id: build-application
  agent: executor
  task: "Build application locally"
  command: "npm run build"
  delegate_to: "bruno"
  verify: "test -d build && test -f build/index.html"
  success_condition: "0"
  comparison_type: "numeric"
  fail_message: "‚ùå Application build failed"

# 6. Database Migration (delegates to Bruno)
- id: run-database-migrations
  agent: executor
  task: "Run database migrations"
  command: "npm run migrate"
  delegate_to: "bruno"
  verify: "npm run migrate:status | grep -c 'up'"
  success_condition: "5"
  comparison_type: "numeric_gt"
  fail_message: "‚ùå Database migrations incomplete"

# 7. Docker Build and Push
- id: docker-build-push
  agent: orchestrator
  task: "Build and push Docker image"
  command: |
    docker build -t myapp:$(git rev-parse --short HEAD) . && \
    echo "{{DOCKER_HUB_TOKEN}}" | docker login -u myusername --password-stdin && \
    docker push myapp:$(git rev-parse --short HEAD)
  verify: 'docker images | grep myapp | grep $(git rev-parse --short HEAD)'
  success_condition: "myapp"
  comparison_type: "contains"
  fail_message: "‚ùå Docker build/push failed"

# 8. Zapier Webhook Trigger
- id: trigger-zapier-webhook
  agent: orchestrator
  task: "Trigger Zapier deployment webhook"
  command: |
    curl -X POST "{{ZAPIER_WEBHOOK_URL}}" \
      -H "Content-Type: application/json" \
      -d '{
        "event": "deployment_complete",
        "timestamp": "$(date -Iseconds)",
        "status": "success",
        "environment": "production",
        "commit": "$(git rev-parse HEAD)",
        "deployer": "secure-executor"
      }'
  verify: 'curl -s -o /dev/null -w "%{http_code}" "{{ZAPIER_WEBHOOK_URL}}"'
  success_condition: "200"
  fail_message: "‚ùå Zapier webhook trigger failed"

# 9. SendGrid Email Notification
- id: send-deployment-email
  agent: orchestrator
  task: "Send deployment notification email"
  command: |
    curl -X POST https://api.sendgrid.com/v3/mail/send \
      -H "Authorization: Bearer {{SENDGRID_API_KEY}}" \
      -H "Content-Type: application/json" \
      -d '{
        "personalizations": [
          {
            "to": [{"email": "team@company.com"}],
            "subject": "Deployment Complete - $(date +%Y-%m-%d)"
          }
        ],
        "from": {"email": "noreply@company.com"},
        "content": [
          {
            "type": "text/html",
            "value": "<h2>Deployment Successful ‚úÖ</h2><p>Your application has been deployed to production.</p><p><strong>Time:</strong> $(date)</p><p><strong>Commit:</strong> $(git rev-parse --short HEAD)</p>"
          }
        ]
      }'
  verify: 'curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer {{SENDGRID_API_KEY}}" "https://api.sendgrid.com/v3/user/profile"'
  success_condition: "200"
  fail_message: "‚ùå SendGrid email notification failed"

# 10. Health Check Verification
- id: verify-deployment-health
  agent: orchestrator
  task: "Verify deployed application health"
  command: 'curl -s "https://myapp.vercel.app/api/health"'
  verify: 'curl -s -o /dev/null -w "%{http_code}" "https://myapp.vercel.app/api/health"'
  success_condition: "200"
  fail_message: "‚ùå Application health check failed"
  stop_on_failure: true  # Critical - stop if health check fails