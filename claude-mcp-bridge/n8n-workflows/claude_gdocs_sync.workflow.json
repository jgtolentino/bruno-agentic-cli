{
  "name": "Claude ↔ Google Docs I/O Sync Bridge",
  "nodes": [
    {
      "parameters": {},
      "id": "b5d2e5f5-4b4a-4a0a-8b0a-1a2b3c4d5e6f",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "path": "~/claude/sync/claude-output.txt",
        "options": {
          "events": ["add", "change"]
        }
      },
      "id": "fs-watch-claude-output",
      "name": "Watch Claude Output File",
      "type": "n8n-nodes-base.fileSystemWatcher",
      "typeVersion": 1,
      "position": [240, 480],
      "notes": "Monitors ~/claude/sync/claude-output.txt for changes from Claude CLI"
    },
    {
      "parameters": {
        "filePath": "~/claude/sync/claude-output.txt",
        "encoding": "utf8"
      },
      "id": "read-claude-output",
      "name": "Read Claude Output",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [460, 480],
      "notes": "Reads the content generated by Claude"
    },
    {
      "parameters": {
        "jsCode": "// Parse Claude output and prepare for Google Docs\nconst rawContent = $input.first().binary.data.toString('utf8');\n\n// Extract metadata if present (JSON header)\nlet content = rawContent;\nlet metadata = {};\n\ntry {\n  const lines = rawContent.split('\\n');\n  if (lines[0].startsWith('```json') && lines.includes('```')) {\n    const jsonEndIndex = lines.slice(1).indexOf('```') + 1;\n    const jsonContent = lines.slice(1, jsonEndIndex).join('\\n');\n    metadata = JSON.parse(jsonContent);\n    content = lines.slice(jsonEndIndex + 1).join('\\n');\n  }\n} catch (e) {\n  // No metadata, use raw content\n}\n\n// Format content for Google Docs\nconst formattedContent = content\n  .replace(/^# /gm, '')\n  .replace(/^## /gm, '  ')\n  .replace(/^### /gm, '    ')\n  .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n  .replace(/\\*(.*?)\\*/g, '$1');\n\nreturn {\n  content: formattedContent,\n  metadata: metadata,\n  timestamp: new Date().toISOString(),\n  documentId: metadata.documentId || process.env.CLAUDE_DEFAULT_DOC_ID,\n  operation: metadata.operation || 'append',\n  title: metadata.title || `Claude Output ${new Date().toLocaleString()}`\n};"
      },
      "id": "process-claude-content",
      "name": "Process Claude Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 480],
      "notes": "Processes Claude output and extracts metadata"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "serviceAccountEmail": "claude-mcp-docs-service@claude-mcp-bridge.iam.gserviceaccount.com",
        "operation": "update",
        "documentId": "={{$json.documentId}}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insertText",
              "text": "\\n\\n--- Claude Output ({{$json.timestamp}}) ---\\n{{$json.content}}\\n",
              "location": "endOfSegmentLocation"
            }
          ]
        },
        "simple": false
      },
      "id": "update-google-doc",
      "name": "Update Google Doc",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [900, 480],
      "notes": "Appends Claude output to Google Doc"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claude-input",
        "options": {
          "cors": true
        }
      },
      "id": "webhook-gdocs-to-claude",
      "name": "Webhook: GDocs → Claude",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 660],
      "notes": "Receives requests to sync Google Doc content to Claude"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "serviceAccountEmail": "claude-mcp-docs-service@claude-mcp-bridge.iam.gserviceaccount.com",
        "operation": "get",
        "documentId": "={{$json.body.documentId}}",
        "simple": false
      },
      "id": "get-google-doc",
      "name": "Get Google Doc Content",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [460, 660],
      "notes": "Fetches content from specified Google Doc"
    },
    {
      "parameters": {
        "jsCode": "// Extract and format Google Doc content for Claude\nconst doc = $input.first().json;\nconst body = doc.body;\n\nfunction extractText(element) {\n  let text = '';\n  \n  if (element.paragraph) {\n    element.paragraph.elements.forEach(el => {\n      if (el.textRun) {\n        text += el.textRun.content;\n      }\n    });\n  }\n  \n  return text;\n}\n\nlet content = '';\nif (body && body.content) {\n  body.content.forEach(element => {\n    content += extractText(element);\n  });\n}\n\n// Clean up and format for Claude\nconst cleanContent = content\n  .replace(/\\u000b/g, '\\n') // Replace vertical tabs with newlines\n  .trim();\n\n// Create metadata for Claude\nconst metadata = {\n  sourceDocument: doc.documentId,\n  title: doc.title,\n  lastModified: new Date().toISOString(),\n  instructions: $json.body.instructions || 'Please review and edit this content'\n};\n\nreturn {\n  content: cleanContent,\n  metadata: metadata,\n  filename: `claude-input-${Date.now()}.md`,\n  fullContent: `# ${doc.title}\\n\\n${cleanContent}\\n\\n---\\n*Source: Google Doc ${doc.documentId}*\\n*Instructions: ${metadata.instructions}*`\n};"
      },
      "id": "format-gdoc-for-claude",
      "name": "Format GDoc for Claude",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 660],
      "notes": "Formats Google Doc content for Claude input"
    },
    {
      "parameters": {
        "filePath": "~/claude/sync/{{$json.filename}}",
        "fileContent": "={{$json.fullContent}}",
        "encoding": "utf8"
      },
      "id": "write-claude-input",
      "name": "Write Claude Input File",
      "type": "n8n-nodes-base.writeFile",
      "typeVersion": 1,
      "position": [900, 660],
      "notes": "Saves formatted content to Claude input directory"
    },
    {
      "parameters": {
        "path": "~/claude/sync/claude-suggestions.json",
        "options": {
          "events": ["add", "change"]
        }
      },
      "id": "watch-claude-suggestions",
      "name": "Watch Claude Suggestions",
      "type": "n8n-nodes-base.fileSystemWatcher",
      "typeVersion": 1,
      "position": [240, 840],
      "notes": "Monitors for structured edit suggestions from Claude"
    },
    {
      "parameters": {
        "filePath": "~/claude/sync/claude-suggestions.json",
        "encoding": "utf8"
      },
      "id": "read-suggestions",
      "name": "Read Suggestions",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [460, 840]
    },
    {
      "parameters": {
        "jsCode": "// Parse Claude's structured edit suggestions\nconst suggestionsData = JSON.parse($input.first().binary.data.toString('utf8'));\n\n// Transform suggestions into Google Docs batch update format\nconst batchUpdates = [];\n\nsuggestionsData.edits.forEach((edit, index) => {\n  switch (edit.type) {\n    case 'insert':\n      batchUpdates.push({\n        insertText: {\n          text: edit.text,\n          location: edit.location || { index: 1 }\n        }\n      });\n      break;\n      \n    case 'replace':\n      batchUpdates.push({\n        deleteContentRange: {\n          range: edit.range\n        }\n      });\n      batchUpdates.push({\n        insertText: {\n          text: edit.newText,\n          location: { index: edit.range.startIndex }\n        }\n      });\n      break;\n      \n    case 'comment':\n      // Add as suggestion comment\n      batchUpdates.push({\n        createParagraphBullets: {\n          range: edit.range,\n          bulletPreset: 'BULLET_DISC_CIRCLE_SQUARE'\n        }\n      });\n      break;\n  }\n});\n\nreturn {\n  documentId: suggestionsData.documentId,\n  requests: batchUpdates,\n  metadata: suggestionsData.metadata || {},\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "process-suggestions",
      "name": "Process Suggestions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 840],
      "notes": "Converts Claude suggestions to Google Docs API format"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "serviceAccountEmail": "claude-mcp-docs-service@claude-mcp-bridge.iam.gserviceaccount.com",
        "operation": "update",
        "documentId": "={{$json.documentId}}",
        "actionsUi": {
          "actionFields": "={{$json.requests}}"
        },
        "simple": false
      },
      "id": "apply-suggestions",
      "name": "Apply Suggestions to Doc",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [900, 840],
      "notes": "Applies Claude's suggestions to Google Doc"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "operation": "equal",
              "value2": "create"
            }
          ]
        }
      },
      "id": "check-operation-type",
      "name": "Check Operation Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300],
      "notes": "Routes to create new doc vs update existing"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "serviceAccountEmail": "claude-mcp-docs-service@claude-mcp-bridge.iam.gserviceaccount.com",
        "operation": "create",
        "title": "={{$json.title}}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insertText",
              "text": "{{$json.content}}",
              "location": "endOfSegmentLocation"
            }
          ]
        }
      },
      "id": "create-new-doc",
      "name": "Create New Google Doc",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [900, 300],
      "notes": "Creates new Google Doc with Claude content"
    }
  ],
  "connections": {
    "When clicking \"Test workflow\"": {
      "main": [
        [
          {
            "node": "Check Operation Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Watch Claude Output File": {
      "main": [
        [
          {
            "node": "Read Claude Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Claude Output": {
      "main": [
        [
          {
            "node": "Process Claude Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Claude Content": {
      "main": [
        [
          {
            "node": "Check Operation Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Operation Type": {
      "main": [
        [
          {
            "node": "Create New Google Doc",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Google Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook: GDocs → Claude": {
      "main": [
        [
          {
            "node": "Get Google Doc Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Google Doc Content": {
      "main": [
        [
          {
            "node": "Format GDoc for Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format GDoc for Claude": {
      "main": [
        [
          {
            "node": "Write Claude Input File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Watch Claude Suggestions": {
      "main": [
        [
          {
            "node": "Read Suggestions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Suggestions": {
      "main": [
        [
          {
            "node": "Process Suggestions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Suggestions": {
      "main": [
        [
          {
            "node": "Apply Suggestions to Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/New_York"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "claude-gdocs-sync-bridge",
  "tags": [
    {
      "createdAt": "2024-05-31T12:00:00.000Z",
      "updatedAt": "2024-05-31T12:00:00.000Z",
      "id": "claude-integration",
      "name": "Claude Integration"
    },
    {
      "createdAt": "2024-05-31T12:00:00.000Z", 
      "updatedAt": "2024-05-31T12:00:00.000Z",
      "id": "google-docs",
      "name": "Google Docs"
    }
  ]
}