{
  "description": "TBWA Retail Dashboard - GitHub Repository Automation",
  "operations": [
    {
      "id": "create-sprint-issues",
      "service": "github",
      "action": "createIssuesFromTasks", 
      "description": "Create development issues for current sprint",
      "data": {
        "owner": "tbwa",
        "repo": "retail-insights-dashboard-ph",
        "tasks": [
          {
            "title": "Implement real-time data subscriptions",
            "body": "Add Supabase real-time subscriptions for live dashboard updates\n\n**Acceptance Criteria:**\n- [ ] Set up Supabase subscriptions for key metrics\n- [ ] Implement React hooks for real-time updates\n- [ ] Add connection status indicators\n- [ ] Test with multiple concurrent users\n\n**Priority:** High\n**Estimated Hours:** 8\n\n*Generated by Claude MCP Bridge*",
            "labels": ["enhancement", "backend", "high-priority", "sprint-current"]
          },
          {
            "title": "Add mobile-responsive dashboard layouts",
            "body": "Optimize dashboard components for mobile and tablet viewing\n\n**Acceptance Criteria:**\n- [ ] Responsive breakpoints for all screen sizes\n- [ ] Touch-friendly navigation and controls\n- [ ] Optimized chart rendering for mobile\n- [ ] Performance testing on mobile devices\n\n**Priority:** Medium\n**Estimated Hours:** 12\n\n*Generated by Claude MCP Bridge*",
            "labels": ["enhancement", "frontend", "mobile", "medium-priority"]
          },
          {
            "title": "Set up automated testing pipeline",
            "body": "Configure GitHub Actions for automated testing and deployment\n\n**Acceptance Criteria:**\n- [ ] Unit tests run on all PRs\n- [ ] Integration tests for API endpoints\n- [ ] E2E tests for critical user flows\n- [ ] Automated deployment to staging\n\n**Priority:** High\n**Estimated Hours:** 16\n\n*Generated by Claude MCP Bridge*",
            "labels": ["devops", "testing", "ci-cd", "high-priority"]
          }
        ]
      }
    },
    {
      "id": "create-documentation-milestone",
      "service": "github", 
      "action": "createMilestone",
      "description": "Create milestone for documentation sprint",
      "data": {
        "owner": "tbwa",
        "repo": "retail-insights-dashboard-ph",
        "title": "Documentation Sprint - Q1 2024",
        "description": "Complete technical documentation and user guides for TBWA retail dashboard",
        "due_on": "2024-03-31T23:59:59Z"
      }
    },
    {
      "id": "create-feature-branch",
      "service": "github",
      "action": "createBranch", 
      "description": "Create feature branch for real-time updates",
      "data": {
        "owner": "tbwa",
        "repo": "retail-insights-dashboard-ph",
        "branch": "feature/real-time-subscriptions",
        "from_branch": "main"
      }
    },
    {
      "id": "commit-api-documentation",
      "service": "github",
      "action": "commitFile",
      "description": "Add API documentation to repository",
      "data": {
        "owner": "tbwa", 
        "repo": "retail-insights-dashboard-ph",
        "path": "docs/API.md",
        "message": "Add comprehensive API documentation\n\n- Document all endpoints with examples\n- Include authentication requirements\n- Add error handling guidelines\n- Provide sample requests/responses\n\nGenerated by Claude MCP Bridge",
        "content": "# TBWA Retail Dashboard API Documentation\n\n## Overview\nThis document provides comprehensive documentation for the TBWA Retail Dashboard API endpoints.\n\n## Authentication\nAll API requests require authentication using Bearer tokens:\n```\nAuthorization: Bearer <your-token>\n```\n\n## Endpoints\n\n### Brand Performance\n```\nGET /api/brands/{id}/performance\n```\nRetrieve performance metrics for a specific brand.\n\n**Parameters:**\n- `id` (string): Brand identifier\n- `start_date` (string): Start date (YYYY-MM-DD)\n- `end_date` (string): End date (YYYY-MM-DD)\n\n**Response:**\n```json\n{\n  \"brand_id\": \"tbwa-client-001\",\n  \"metrics\": {\n    \"revenue\": 1250000,\n    \"growth_rate\": 15.2,\n    \"market_share\": 8.7\n  },\n  \"period\": {\n    \"start\": \"2024-01-01\",\n    \"end\": \"2024-01-31\"\n  }\n}\n```\n\n### Consumer Demographics\n```\nGET /api/demographics\n```\nRetrieve consumer demographic breakdown.\n\n**Parameters:**\n- `region` (string, optional): Filter by region\n- `brand` (string, optional): Filter by brand\n\n**Response:**\n```json\n{\n  \"demographics\": {\n    \"age_groups\": {\n      \"18-25\": 25.4,\n      \"26-35\": 32.1,\n      \"36-45\": 28.7,\n      \"46+\": 13.8\n    },\n    \"total_customers\": 15750\n  }\n}\n```\n\n## Error Handling\n\nAll errors follow this format:\n```json\n{\n  \"error\": {\n    \"code\": \"INVALID_REQUEST\",\n    \"message\": \"Detailed error description\",\n    \"details\": {}\n  }\n}\n```\n\n## Rate Limiting\n- Standard rate limit: 1000 requests per hour\n- Burst allowance: 100 requests per minute\n\n*Documentation generated by Claude MCP Bridge*\n*Last updated: " + new Date().toISOString() + "*"
      }
    }
  ]
}